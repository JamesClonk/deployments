#@ load("@ytt:data", "data")
#@ load("_ytt.lib.yml", "labels", "podAntiAffinity")
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: irvisualizer
  namespace: #@ data.values.namespace
spec:
  selector:
    matchLabels: #@ labels("irvisualizer","frontend")
  replicas: #@ data.values.irvisualizer.replicas
  template:
    metadata:
      labels: #@ labels("irvisualizer","frontend")
    spec:
      affinity: #@ podAntiAffinity("irvisualizer","frontend")
      containers:
      - name: irvisualizer
        image: #@ data.values.irvisualizer.image
        ports:
        - containerPort: 8080
        env:
        - name: PORT
          value: "8080"
        - name: LOG_LEVEL
          value: "debug"
        envFrom:
        - secretRef:
            name: #@ data.values.app
        resources:
          requests:
            memory: "64Mi"
            cpu: "150m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "64Mi"
            cpu: "250m"
            ephemeral-storage: "1Gi"
        readinessProbe:
          httpGet:
            path: /
            port: 8080
        livenessProbe:
          initialDelaySeconds: 15
          periodSeconds: 15
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
          httpGet:
            path: /
            port: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ircollector
  namespace: #@ data.values.namespace
spec:
  selector:
    matchLabels: #@ labels("ircollector","backend")
  replicas: #@ data.values.ircollector.replicas
  template:
    metadata:
      labels: #@ labels("ircollector","backend")
    spec:
      affinity: #@ podAntiAffinity("ircollector","backend")
      containers:
      - name: ircollector
        image: #@ data.values.ircollector.image
        ports:
        - containerPort: 8080
        env:
        - name: PORT
          value: "8080"
        - name: LOG_LEVEL
          value: "debug"
        envFrom:
        - secretRef:
            name: #@ data.values.app
        resources:
          requests:
            memory: "64Mi"
            cpu: "200m"
          limits:
            memory: "64Mi"
            cpu: "250m"
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
        livenessProbe:
          initialDelaySeconds: 15
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - bash
            - -c
            - 'curl --fail http://localhost:8080/seasons --header "Authorization: ${PROBE_AUTHORIZATION}"'
