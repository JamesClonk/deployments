#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")
#@ load("_ytt.lib.yml", "labels")
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ data.values.app + "-basic-auth"
  namespace: #@ data.values.namespace
  labels: #@ labels("prometheus")
type: Opaque
data:
  #@ if len(data.values.ingress.auth) == 0:
  #@  assert.fail("ingress.auth cannot be empty")
  #@ end
  auth: #@ data.values.ingress.auth
stringData:
  #@ if len(data.values.ingress.username) == 0:
  #@  assert.fail("ingress.username cannot be empty")
  #@ end
  #@ if len(data.values.ingress.password) == 0:
  #@  assert.fail("ingress.password cannot be empty")
  #@ end
  username: #@ data.values.ingress.username
  password: #@ data.values.ingress.password

---
apiVersion: v1
kind: Secret
metadata:
  name: #@ data.values.app + "-secret-files"
  namespace: #@ data.values.namespace
  labels: #@ labels("prometheus")
type: Opaque
stringData:
  backman: #@ data.values.backman.password

---
apiVersion: v1
kind: Secret
metadata:
  name: #@ data.values.app + "-alertmanager"
  namespace: #@ data.values.namespace
  labels: #@ labels("alertmanager")
  annotations:
    kapp.k14s.io/versioned: ""
type: Opaque
#@yaml/text-templated-strings
stringData:
  #@ if len(data.values.alertmanager.email_from) == 0:
  #@  assert.fail("alertmanager.email_from cannot be empty")
  #@ end
  #@ if len(data.values.alertmanager.email_to) == 0:
  #@  assert.fail("alertmanager.email_to cannot be empty")
  #@ end
  #@ if len(data.values.alertmanager.email_password) == 0:
  #@  assert.fail("alertmanager.email_password cannot be empty")
  #@ end
  #@ if len(data.values.alertmanager.slack_api_url) == 0:
  #@  assert.fail("alertmanager.slack_api_url cannot be empty")
  #@ end
  alertmanager.yml: |
    global:
      resolve_timeout: 5m
    receivers:
    - name: notifications
      email_configs:
      - to: '(@= data.values.alertmanager.email_to @)'
        from: '(@= data.values.alertmanager.email_from @)'
        smarthost: smtp.gmail.com:587
        auth_username: '(@= data.values.alertmanager.email_from @)'
        auth_identity: '(@= data.values.alertmanager.email_from @)'
        auth_password: '(@= data.values.alertmanager.email_password @)'
        send_resolved: false
      slack_configs:
      - api_url: '(@= data.values.alertmanager.slack_api_url @)'
        username: 'Alertmanager'
        channel: '@Fabio'
        send_resolved: false
        title: |-
          [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }} for {{ .CommonLabels.job }}
        text: >-
          {{ range .Alerts -}}
          *Alert:* {{ .Annotations.title }}

          *Description:* {{ .Annotations.description }}

          {{ if .Labels.severity }}*Severity*: `{{ .Labels.severity }}`{{ end }}

          *Details:*
            {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
            {{ end }}
          {{ end }}
    route:
      group_interval: 10m
      group_wait: 1m
      group_by: [alertname, job]
      receiver: notifications
      repeat_interval: 12h
