#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")
#@ load("_ytt.lib.yml", "labels")
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ data.values.app + "-database-secret"
  namespace: #@ data.values.namespace
  labels: #@ labels("database")
type: Opaque
stringData:
  #@ if len(data.values.postgres.database.name) == 0:
  #@  assert.fail("data.values.postgres.database.name cannot be empty")
  #@ end
  POSTGRES_DB: #@ data.values.postgres.database.name
  #@ if len(data.values.postgres.database.user) == 0:
  #@  assert.fail("data.values.postgres.database.user cannot be empty")
  #@ end
  POSTGRES_USER: #@ data.values.postgres.database.user
  #@ if len(data.values.postgres.database.password) == 0:
  #@  assert.fail("data.values.postgres.database.password cannot be empty")
  #@ end
  POSTGRES_PASSWORD: #@ data.values.postgres.database.password
  PGDATA: /var/lib/postgresql/data/pgdata

---
apiVersion: v1
kind: Secret
metadata:
  name: #@ data.values.app + "-init-script"
  namespace: #@ data.values.namespace
  labels: #@ labels("database")
type: Opaque
#@yaml/text-templated-strings
stringData:
  init.sh: |
    #!/bin/bash
    set -e
    (@ for db in data.values.postgres.additional_databases: @)
    (@ if len(db.name) == 0: @)
    (@  assert.fail("name of additional database cannot be empty") @)
    (@ end @)
    (@ if len(db.user) == 0: @)
    (@  assert.fail("user of additional database cannot be empty") @)
    (@ end @)
    (@ if len(db.password) == 0: @)
    (@  assert.fail("password of additional database cannot be empty") @)
    (@ end @)
    cat > /tmp/setup_db.sql <<EOF
    CREATE DATABASE (@= db.name @);
    CREATE ROLE (@= db.user @) LOGIN PASSWORD '(@= db.password @)';
    GRANT ALL PRIVILEGES ON DATABASE (@= db.name @) TO (@= db.user @);
    EOF
    psql -v ON_ERROR_STOP=1 -U (@= data.values.postgres.database.user @) -d (@= data.values.postgres.database.name @) -f /tmp/setup_db.sql
    psql -v ON_ERROR_STOP=1 -U (@= data.values.postgres.database.user @) -d (@= db.name @) -c 'CREATE EXTENSION citext'
    rm -f /tmp/setup_db.sql
    (@ end @)
